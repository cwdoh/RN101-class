{"version":3,"sources":["../node_modules/prismjs/components/prism-scss.js"],"names":["Prism","languages","scss","extend","comment","pattern","lookbehind","atrule","inside","rule","url","selector","parent","alias","placeholder","variable","insertBefore","keyword","property","statement","boolean","null","operator","rest"],"mappings":"2CAAAA,MAAAC,UAAAC,KAAAF,MAAAC,UAAAE,OAAA,OACAC,QAAA,CACAC,QAAA,uCACAC,YAAA,GAEAC,OAAA,CACAF,QAAA,0CACAG,OAAA,CACAC,KAAA,YAKAC,IAAA,0BAQAC,SAAA,CAEAN,QAAA,mFACAG,OAAA,CACAI,OAAA,CACAP,QAAA,IACAQ,MAAA,aAEAC,YAAA,UACAC,SAAA,6BAIAf,MAAAC,UAAAe,aAAA,iBACAC,QAAA,wGACAZ,QAAA,4BACAC,YAAA,MAGAN,MAAAC,UAAAC,KAAAgB,SAAA,CACAb,QAAA,6CACAG,OAAA,CACAO,SAAA,2BAGAf,MAAAC,UAAAe,aAAA,oBAEAD,SAAA,2BAEAf,MAAAC,UAAAe,aAAA,mBACAF,YAAA,CACAT,QAAA,UACAQ,MAAA,YAEAM,UAAA,CACAd,QAAA,6BACAQ,MAAA,WAEAO,QAAA,qBACAC,KAAA,WACAC,SAAA,CACAjB,QAAA,kDACAC,YAAA,KAGAN,MAAAC,UAAAC,KAAA,OAAAM,OAAAe,KAAAvB,MAAAC,UAAAC","file":"252.8fa6fdae899254a01de4.worker.js","sourcesContent":["Prism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)*url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|&|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.scss.property = {\n  pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/i,\n  inside: {\n    'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n  }\n};\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': /\\bnull\\b/,\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;"],"sourceRoot":""}