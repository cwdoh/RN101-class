{"version":3,"sources":["../node_modules/prismjs/components/prism-php.min.js"],"names":["e","languages","php","extend","keyword","constant","comment","pattern","lookbehind","insertBefore","shell-comment","alias","delimiter","variable","package","inside","punctuation","property","nowdoc-string","greedy","heredoc-string","interpolation","single-quoted-string","double-quoted-string","string","n","rest","hooks","add","test","code","buildPlaceholders","tokenizePlaceholders","Prism"],"mappings":"4CAAA,SAAAA,GACAA,EAAAC,UAAAC,IAAAF,EAAAC,UAAAE,OAAA,SACAC,QAAA,4aACAC,SAAA,oBACAC,QAAA,CACAC,QAAA,uCACAC,YAAA,KAEGR,EAAAC,UAAAQ,aAAA,gBACHC,gBAAA,CACAH,QAAA,eACAC,YAAA,EACAG,MAAA,aAEGX,EAAAC,UAAAQ,aAAA,iBACHG,UAAA,CACAL,QAAA,qBACAI,MAAA,aAEAE,SAAA,sBACAC,QAAA,CACAP,QAAA,kCACAC,YAAA,EACAO,OAAA,CACAC,YAAA,SAGGhB,EAAAC,UAAAQ,aAAA,kBACHQ,SAAA,CACAV,QAAA,YACAC,YAAA,KAEGR,EAAAC,UAAAQ,aAAA,gBACHS,gBAAA,CACAX,QAAA,kDACAY,QAAA,EACAR,MAAA,SACAI,OAAA,CACAH,UAAA,CACAL,QAAA,2BACAI,MAAA,SACAI,OAAA,CACAC,YAAA,mBAKAI,iBAAA,CACAb,QAAA,sGACAY,QAAA,EACAR,MAAA,SACAI,OAAA,CACAH,UAAA,CACAL,QAAA,yCACAI,MAAA,SACAI,OAAA,CACAC,YAAA,iBAGAK,cAAA,OAGAC,uBAAA,CACAf,QAAA,yBACAY,QAAA,EACAR,MAAA,UAEAY,uBAAA,CACAhB,QAAA,yBACAY,QAAA,EACAR,MAAA,SACAI,OAAA,CACAM,cAAA,gBAGGrB,EAAAC,UAAAC,IAAAsB,OACH,IAAAC,EAAA,CACAlB,QAAA,6EACAC,YAAA,EACAO,OAAA,CACAW,KAAA1B,EAAAC,UAAAC,MAGAF,EAAAC,UAAAC,IAAA,kBAAAa,OAAAM,cAAAI,EAAAzB,EAAAC,UAAAC,IAAA,wBAAAa,OAAAM,cAAAI,EAAAzB,EAAA2B,MAAAC,IAAA,2BAAAH,GACA,sBAAAI,KAAAJ,EAAAK,MAAA,CAEA9B,EAAAC,UAAA,qBAAA8B,kBAAAN,EAAA,MADA,wCAGGzB,EAAA2B,MAAAC,IAAA,0BAAAH,GACHzB,EAAAC,UAAA,qBAAA+B,qBAAAP,EAAA,SAzFA,CA2FCQ","file":"203.8fa6fdae899254a01de4.worker.js","sourcesContent":["!function (e) {\n  e.languages.php = e.languages.extend(\"clike\", {\n    keyword: /\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n    constant: /\\b[A-Z0-9_]{2,}\\b/,\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: !0\n    }\n  }), e.languages.insertBefore(\"php\", \"string\", {\n    \"shell-comment\": {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: !0,\n      alias: \"comment\"\n    }\n  }), e.languages.insertBefore(\"php\", \"keyword\", {\n    delimiter: {\n      pattern: /\\?>|<\\?(?:php|=)?/i,\n      alias: \"important\"\n    },\n    variable: /\\$+(?:\\w+\\b|(?={))/i,\n    \"package\": {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: !0,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }), e.languages.insertBefore(\"php\", \"operator\", {\n    property: {\n      pattern: /(->)[\\w]+/,\n      lookbehind: !0\n    }\n  }), e.languages.insertBefore(\"php\", \"string\", {\n    \"nowdoc-string\": {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: \"symbol\",\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    \"heredoc-string\": {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: \"symbol\",\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: null\n      }\n    },\n    \"single-quoted-string\": {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: !0,\n      alias: \"string\"\n    },\n    \"double-quoted-string\": {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: !0,\n      alias: \"string\",\n      inside: {\n        interpolation: null\n      }\n    }\n  }), delete e.languages.php.string;\n  var n = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: !0,\n    inside: {\n      rest: e.languages.php\n    }\n  };\n  e.languages.php[\"heredoc-string\"].inside.interpolation = n, e.languages.php[\"double-quoted-string\"].inside.interpolation = n, e.hooks.add(\"before-tokenize\", function (n) {\n    if (/(?:<\\?php|<\\?)/gi.test(n.code)) {\n      var i = /(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/gi;\n      e.languages[\"markup-templating\"].buildPlaceholders(n, \"php\", i);\n    }\n  }), e.hooks.add(\"after-tokenize\", function (n) {\n    e.languages[\"markup-templating\"].tokenizePlaceholders(n, \"php\");\n  });\n}(Prism);"],"sourceRoot":""}