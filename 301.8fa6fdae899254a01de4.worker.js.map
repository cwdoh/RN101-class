{"version":3,"sources":["../node_modules/prismjs/components/prism-xquery.min.js"],"names":["e","languages","xquery","extend","xquery-comment","pattern","greedy","alias","string","extension","variable","axis","lookbehind","keyword-operator","keyword","function","xquery-element","xquery-attribute","builtin","number","operator","punctuation","tag","inside","expression","rest","t","content","map","join","n","a","o","i","length","r","s","type","tagName","pop","push","openedBraces","l","splice","test","Token","hooks","add","language","tokens","Prism"],"mappings":"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","file":"301.8fa6fdae899254a01de4.worker.js","sourcesContent":["!function (e) {\n  e.languages.xquery = e.languages.extend(\"markup\", {\n    \"xquery-comment\": {\n      pattern: /\\(:[\\s\\S]*?:\\)/,\n      greedy: !0,\n      alias: \"comment\"\n    },\n    string: {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n      greedy: !0\n    },\n    extension: {\n      pattern: /\\(#.+?#\\)/,\n      alias: \"symbol\"\n    },\n    variable: /\\$[\\w-:]+/,\n    axis: {\n      pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n      lookbehind: !0,\n      alias: \"operator\"\n    },\n    \"keyword-operator\": {\n      pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n      lookbehind: !0,\n      alias: \"operator\"\n    },\n    keyword: {\n      pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n      lookbehind: !0\n    },\n    \"function\": /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n    \"xquery-element\": {\n      pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: !0,\n      alias: \"tag\"\n    },\n    \"xquery-attribute\": {\n      pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n      lookbehind: !0,\n      alias: \"attr-name\"\n    },\n    builtin: {\n      pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n      lookbehind: !0\n    },\n    number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n    operator: [/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/, {\n      pattern: /(\\s)-(?=\\s)/,\n      lookbehind: !0\n    }],\n    punctuation: /[[\\](){},;:\\/]/\n  }), e.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i, e.languages.xquery.tag.inside[\"attr-value\"].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i, e.languages.xquery.tag.inside[\"attr-value\"].inside.punctuation = /^=\"|\"$/, e.languages.xquery.tag.inside[\"attr-value\"].inside.expression = {\n    pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n    inside: {\n      rest: e.languages.xquery\n    },\n    alias: \"language-xquery\"\n  };\n\n  var t = function t(e) {\n    return \"string\" == typeof e ? e : \"string\" == typeof e.content ? e.content : e.content.map(t).join(\"\");\n  },\n      n = function n(a) {\n    for (var o = [], i = 0; i < a.length; i++) {\n      var r = a[i],\n          s = !1;\n\n      if (\"string\" != typeof r && (\"tag\" === r.type && r.content[0] && \"tag\" === r.content[0].type ? \"</\" === r.content[0].content[0].content ? o.length > 0 && o[o.length - 1].tagName === t(r.content[0].content[1]) && o.pop() : \"/>\" === r.content[r.content.length - 1].content || o.push({\n        tagName: t(r.content[0].content[1]),\n        openedBraces: 0\n      }) : !(o.length > 0 && \"punctuation\" === r.type && \"{\" === r.content) || a[i + 1] && \"punctuation\" === a[i + 1].type && \"{\" === a[i + 1].content || a[i - 1] && \"plain-text\" === a[i - 1].type && \"{\" === a[i - 1].content ? o.length > 0 && o[o.length - 1].openedBraces > 0 && \"punctuation\" === r.type && \"}\" === r.content ? o[o.length - 1].openedBraces-- : \"comment\" !== r.type && (s = !0) : o[o.length - 1].openedBraces++), (s || \"string\" == typeof r) && o.length > 0 && 0 === o[o.length - 1].openedBraces) {\n        var l = t(r);\n        i < a.length - 1 && (\"string\" == typeof a[i + 1] || \"plain-text\" === a[i + 1].type) && (l += t(a[i + 1]), a.splice(i + 1, 1)), i > 0 && (\"string\" == typeof a[i - 1] || \"plain-text\" === a[i - 1].type) && (l = t(a[i - 1]) + l, a.splice(i - 1, 1), i--), a[i] = /^\\s+$/.test(l) ? l : new e.Token(\"plain-text\", l, null, l);\n      }\n\n      r.content && \"string\" != typeof r.content && n(r.content);\n    }\n  };\n\n  e.hooks.add(\"after-tokenize\", function (e) {\n    \"xquery\" === e.language && n(e.tokens);\n  });\n}(Prism);"],"sourceRoot":""}